%%% -------------------------------------------------------------------
%%% @author  : Joq Erlang
%%% @doc: : 
%%% Created :
%%% Node end point  
%%% Creates and deletes Pods
%%% 
%%% API-kube: Interface 
%%% Pod consits beams from all services, app and app and sup erl.
%%% The setup of envs is
%%% -------------------------------------------------------------------
-module(dist).   
 
-export([start/0]).
%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
-define(OpsNodeName,"ops").
-define(OpsCookie,"ops").

-define(ClId_1,"c1").
-define(ClCookieStr_1,"cookie_c1").
-define(ClNumPods_1,5).
%-define(ClNodeName_1,"c_1").

-define(ClCookie_1,list_to_atom(?ClCookieStr_1)).
-define(ClNodeC100_1,list_to_atom(?ClNodeName_1++"@"++"c100")).
-define(ClNodeC200_1,list_to_atom(?ClNodeName_1++"@"++"c200")).
%-define(ClWorkesNodeName_1,["w_c1_1","w_c1_2","w_c1_3","w_c1_4"]).

-define(HostNames,["c100","c200"]).




%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
start()->
   
    ok=setup(),

    %% Create a new cluster 
    ClusterId=?ClId_1,
    ClusterNodeName=?ClId_1,
    ClusterDir=?ClId_1,
    ClusterHostNames=?HostNames,
    NumPodsPerHost=?ClNumPods_1,
    HostNames=?HostNames,

    WorkerNodeNames=[?ClId_1++"_"++integer_to_lists(N)||N<-lists:seq(0,NumPodsPerHost)],
    WorkerDirs=[{NodeName,filename:join(ClusterDir,WorkerNodeName)}||WorkerNodeName<-WorkerNodeNames],
    
 
    
    
    
	



    %% Delete a existing cluster
    
    %Create clusterNode to connect Nodes and connec them

    true=dist_lib:start_node("c100",?ClNodeName_1,?ClCookieStr_1," -detached  "),
    true=dist_lib:start_node("c200",?ClNodeName_1,?ClCookieStr_1," -detached  "),
    []=lists:sort(dist_lib:cmd(?ClNodeC100_1,?ClCookieStr_1,erlang,nodes,[],5000)),
    pong=dist_lib:cmd(?ClNodeC100_1,?ClCookieStr_1,net_adm,ping,[?ClNodeC200_1],5000),  
    ['c_1@c200']=lists:sort(dist_lib:cmd(?ClNodeC100_1,?ClCookieStr_1,erlang,nodes,[],5000)),
    ['c_1@c100']=lists:sort(dist_lib:cmd(?ClNodeC200_1,?ClCookieStr_1,erlang,nodes,[],5000)),
    
   
    %Create workers
    WorkerArgs_1=" -setcookie "++?ClCookieStr_1,
    C100WorkerList=[dist_lib:cmd(?ClNodeC100_1,?ClCookieStr_1,slave,start,["c100",NodeName, WorkerArgs_1],5000)||NodeName<-?ClWorkesNodeName_1],
 %   io:format("C100WorkerList ~p~n",[C100WorkerList]),
    C100Ping=[{dist_lib:cmd(?ClNodeC100_1,?ClCookieStr_1,net_adm,ping,[Node],3000),Node}||{ok,Node}<-C100WorkerList],
    io:format("C100Ping ~p~n",[C100Ping]), 
    ['c_1@c200','w_c1_1@c100','w_c1_2@c100','w_c1_3@c100','w_c1_4@c100']=lists:sort(dist_lib:cmd(?ClNodeC100_1,?ClCookieStr_1,erlang,nodes,[],5000)),
 

    C200WorkerList=[dist_lib:cmd(?ClNodeC200_1,?ClCookieStr_1,slave,start,["c200",NodeName, WorkerArgs_1],5000)||NodeName<-?ClWorkesNodeName_1],
 %   io:format("C200WorkerList ~p~n",[C200WorkerList]),
    C200Ping=[{dist_lib:cmd(?ClNodeC200_1,?ClCookieStr_1,net_adm,ping,[Node],3000),Node}||{ok,Node}<-C200WorkerList],
    io:format("C100Ping ~p~n",[C200Ping]), 
    ['c_1@c100','w_c1_1@c100','w_c1_1@c200','w_c1_2@c100',
     'w_c1_2@c200','w_c1_3@c100','w_c1_3@c200','w_c1_4@c100','w_c1_4@c200']=lists:sort(dist_lib:cmd(?ClNodeC200_1,?ClCookieStr_1,erlang,nodes,[],5000)),
    %pong=dist_lib:cmd(ClNode1,ClCookie1Str,net_adm,ping,[W1],2000),
    
    %% Clean up
    
    true=dist_lib:stop_node("c100",?ClNodeName_1,?ClCookieStr_1),
    true=dist_lib:stop_node("c200",?ClNodeName_1,?ClCookieStr_1),

    init:stop(),
    ok.


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------

    

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------


setup()->
    ok=application:start(ops),
    true=dist_lib:stop_node("c100",?ClNodeName_1,?ClCookieStr_1),
    true=dist_lib:stop_node("c200",?ClNodeName_1,?ClCookieStr_1),
    ok.
