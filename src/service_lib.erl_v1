%%% -------------------------------------------------------------------
%%% @author  : Joq Erlang
%%% @doc: : 
%%% Created :
%%% Node end point  
%%% Creates and deletes Pods
%%% 
%%% API-kube: Interface 
%%% Pod consits beams from all services, app and app and sup erl.
%%% The setup of envs is
%%% -------------------------------------------------------------------
-module(service_lib).   
  
-export([
	 git_load/4,
	 load/5,
	 start/3,
	 stop/3,
	 unload/3,
	 running/2,
	 loaded/2
	]).
%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
git_load(PodNode,ClusterCookie,Appl,BaseApplDir)->
    GitPath=config:appl
    App=list_to_atom(Appl), 
    {ok,Root}= dist_lib:cmd(PodNode,ClusterCookie,file,get_cwd,[],1000),  
    ApplDir=filename:join(Root,BaseApplDir),
    TempDir=filename:join(Root,"temp.dir"),
    dist_lib:cmd(PodNode,ClusterCookie,os,cmd,["rm -rf "++TempDir],1000),
    timer:sleep(1000),
    ok= dist_lib:cmd(PodNode,ClusterCookie,file,make_dir,[TempDir],1000),
    Clonres= dist_lib:cmd(PodNode,ClusterCookie,os,cmd,["git clone "++GitPath++" "++TempDir],5000),
    timer:sleep(1000),
    io:format("Clonres ~p~n",[Clonres]),

    MvRes= dist_lib:cmd(PodNode,ClusterCookie,os,cmd,["mv  "++TempDir++"/*"++" "++ApplDir],5000),
    io:format("MvRes ~p~n",[MvRes]),
 %   rpc:cast(node(),nodelog_server,log,[info,?MODULE_STRING,?LINE,
%				     {mv_result,MvRes}]),
    RmRes= dist_lib:cmd(PodNode,ClusterCookie,os,cmd,["rm -r  "++TempDir],5000),
    timer:sleep(1000),
    io:format("RmRes ~p~n",[RmRes]),
    %rpc:cast(node(),nodelog_server,log,[info,?MODULE_STRING,?LINE,
%				     {rm_result,RmRes}]),
    Ebin=filename:join(ApplDir,"ebin"),
    Reply=case  dist_lib:cmd(PodNode,ClusterCookie,filelib,is_dir,[Ebin],5000) of
	      true->
		  case  dist_lib:cmd(PodNode,ClusterCookie,code,add_patha,[Ebin],5000) of
		      true->
			  {ok,ApplDir};
		      {badrpc,Reason} ->
			  {error,[badrpc,?MODULE,?FUNCTION_NAME,?LINE,Reason]};
		      Err ->
			  {error,[?MODULE,?FUNCTION_NAME,?LINE,Err]}
		  end;
	      false ->
		  {error,[ebin_dir_not_created,?MODULE,?FUNCTION_NAME,?LINE,Node]};
	      {badrpc,Reason} ->

		  {error,[?MODULE,?FUNCTION_NAME,?LINE,badrpc,Reason]}
	  end,
    Reply.


   
    Result= case dist_lib:mkdir(PodNode,ClusterCookie,ApplDir) of
		{error,Reason}->
		    {error,Reason};
		ok->
		    EbinApplDir=filename:join(ApplDir,"ebin"),
		    case dist_lib:mkdir(PodNode,ClusterCookie,EbinApplDir) of
			{error,Reason}->
			    {error,Reason};
			ok->
			    case file:list_dir(SourceDir) of
				{error,Reason}->
				    {error,Reason};
				{ok,EbinFiles}->
				    [dist_lib:cp_file(PodNode,ClusterCookie,SourceDir,SourcFileName,EbinApplDir)||SourcFileName<-EbinFiles], 
				    case dist_lib:cmd(PodNode,ClusterCookie,code,add_patha,[EbinApplDir],5000) of
					{error,Reason}->
					    {error,Reason};
					true->
					    dist_lib:cmd(PodNode,ClusterCookie,application,load,[App],5000)
				    end
			    end
		    end
	    end,
    Result.

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
load(PodNode,ClusterCookie,Appl,SourceDir,ApplDir)->
    App=list_to_atom(Appl),
    Result= case dist_lib:mkdir(PodNode,ClusterCookie,ApplDir) of
		{error,Reason}->
		    {error,Reason};
		ok->
		    EbinApplDir=filename:join(ApplDir,"ebin"),
		    case dist_lib:mkdir(PodNode,ClusterCookie,EbinApplDir) of
			{error,Reason}->
			    {error,Reason};
			ok->
			    case file:list_dir(SourceDir) of
				{error,Reason}->
				    {error,Reason};
				{ok,EbinFiles}->
				    [dist_lib:cp_file(PodNode,ClusterCookie,SourceDir,SourcFileName,EbinApplDir)||SourcFileName<-EbinFiles], 
				    case dist_lib:cmd(PodNode,ClusterCookie,code,add_patha,[EbinApplDir],5000) of
					{error,Reason}->
					    {error,Reason};
					true->
					    dist_lib:cmd(PodNode,ClusterCookie,application,load,[App],5000)
				    end
			    end
		    end
	    end,
    Result.

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
start(PodNode,ClusterCookie,Appl)->
    App=list_to_atom(Appl),
    dist_lib:cmd(PodNode,ClusterCookie,application,start,[App],5000).

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
stop(PodNode,ClusterCookie,Appl)->
    App=list_to_atom(Appl),
    dist_lib:cmd(PodNode,ClusterCookie,application,stop,[App],5000).

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
unload(PodNode,ClusterCookie,ApplDir)->
    dist_lib:rmdir_r(PodNode,ClusterCookie,ApplDir).


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
running(PodNode,ClusterCookie)->
    dist_lib:cmd(PodNode,ClusterCookie,application,which_applications,[],5000).

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------

loaded(PodNode,ClusterCookie)->
    dist_lib:cmd(PodNode,ClusterCookie,application,loaded_applications,[],5000).



