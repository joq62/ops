%%% -------------------------------------------------------------------
%%% @author  : Joq Erlang
%%% @doc: : 
%%% Created :
%%% Node end point  
%%% Creates and deletes Pods
%%% 
%%% API-kube: Interface 
%%% Pod consits beams from all services, app and app and sup erl.
%%% The setup of envs is
%%% -------------------------------------------------------------------
-module(ops_lib).   
 
-export([
	 start_ops_node/1,
	 stop_ops_node/1,
	 cmd/5,
	 create_agent/1,
	 mkdir/2,
	 rmdir/2,
	 rmdir_r/2,
	 pwd/1,
	 cp_file/4,
	 rm_file/3
	]).

-export([
	 git_clone/3
	]).



%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------

-define(NODENAME,"ops").
-define(TEMP_DIR,"temp_ops").
-define(SSH_TIMEOUT,5000).


%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
start_ops_node(HostName)->
    create_agent(HostName).

stop_ops_node(HostName)->
    Node=list_to_atom(?NODENAME++"@"++HostName),
    rpc:call(Node,init,stop,[]).


%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
cmd(HostName,M,F,A,TimeOut)->
    Reply=case ops_lib:create_agent(HostName) of
	      {error,[node_exists_on_host,HostName]}->
		  {error,[node_exists_on_host,HostName]};
	      {ok,Node} ->
		  R=rpc:call(Node,M,F,A,TimeOut),
		  rpc:call(Node,init,stop,[]),
		  true=vm:check_stopped_node(Node),
		  R
	  end,
    Reply.


%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
git_clone(HostName,AppId,DirToClone)->
    Reply=case config:application_gitpath(AppId) of
		{error,Reason}->
		    {error,[AppId,Reason]};
		GitPath->
		  case ops_lib:create_agent(HostName) of
		      {error,[node_exists_on_host,HostName]}->
			  {error,[node_exists_on_host,HostName]};
		      {ok,Node} ->
			  R=appl:git_clone_to_dir(Node,GitPath,DirToClone),
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  R
		  end
	  end,
    Reply.
			  
%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
mkdir(HostName,DirName)->
    Reply=case ops_lib:create_agent(HostName) of
	      {error,[node_exists_on_host,HostName]}->
		  {error,[node_exists_on_host,HostName]};
	      {ok,Node} ->
		  case rpc:call(Node,filelib,is_dir,[DirName],5000) of
		      {badrpc,Reason}->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[badrpc,Reason]};
		      true ->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[already_exists,DirName]};
		      false ->
			  R=rpc:call(Node,file,make_dir,[DirName],5000),
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  R
		  end
	  end,
    Reply.
	     
%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
pwd(HostName)->
    Reply=case ops_lib:create_agent(HostName) of
	      {error,[node_exists_on_host,HostName]}->
		  {error,[node_exists_on_host,HostName]};
	      {ok,Node} ->
		  R=rpc:call(Node,file,get_cwd,[],5000),
		  rpc:call(Node,init,stop,[]),
		  true=vm:check_stopped_node(Node),
		  R
	  end,
    Reply.
	     
	    

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
rmdir(HostName,DirName)->
    Reply=case ops_lib:create_agent(HostName) of
	      {error,[node_exists_on_host,HostName]}->
		  {error,[node_exists_on_host,HostName]};
	      {ok,Node} ->
		  case rpc:call(Node,filelib,is_dir,[DirName],5000) of
		      {badrpc,Reason}->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[badrpc,Reason]};
		     false ->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[eexists,DirName]};
		      true->
			  R=rm:r(Node,DirName),
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  R
		  end
	  end,
    Reply.
	     
 %% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
rmdir_r(HostName,DirName)->
    Reply=case ops_lib:create_agent(HostName) of
	      {error,[node_exists_on_host,HostName]}->
		  {error,[node_exists_on_host,HostName]};
	      {ok,Node} ->
		  case rpc:call(Node,file,get_cwd,[],5000) of
		      {error,Reason}->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[Reason]};
		      {badrpc,Reason}->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[badrpc,Reason]};
		      {ok,Cwd}->
			  FullDirName=filename:join(Cwd,DirName),
			  R=rpc:call(Node,os,cmd,["rm -rf "++FullDirName],5000),
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  R
		  end
	  end,
    Reply.
	     
	    
%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
create_agent(HostName)->
    Reply=case net_adm:ping(list_to_atom(?NODENAME++"@"++HostName)) of
	      pong->
		  {error,[node_already_exists,HostName]};
	      pang->
		  Ip=config:host_local_ip(HostName),
		  SshPort=config:host_ssh_port(HostName),
		  Uid=config:host_uid(HostName),
		  Pwd=config:host_passwd(HostName),
		  NodeName=?NODENAME,
		  Cookie=atom_to_list(erlang:get_cookie()),
		  PaArgs=" ",
		  EnvArgs=" -hidden ",
		  TimeOut=?SSH_TIMEOUT,
		  ssh_vm:create(HostName,NodeName,Cookie,PaArgs,EnvArgs,{Ip,SshPort,Uid,Pwd,TimeOut})
	  end,
    Reply.

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
cp_file(SourceDir,SourcFileName,HostName, DestDir)->
    Reply=case ops_lib:create_agent(HostName) of
	      {error,[node_exists_on_host,HostName]}->
		  {error,[node_exists_on_host,HostName]};
	      {ok,Node} ->
		  DestFileName=filename:join(DestDir,SourcFileName),
		  SourceFileName=filename:join(SourceDir,SourcFileName),
		  case rpc:call(Node,filelib,is_file,[DestFileName],5000) of
		      {badrpc,Reason}->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[badrpc,Reason]};
		      true ->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[already_exists,DestFileName]};
		      false ->
			  R=case file:read_file(SourceFileName) of
				{error,Reason}->
				    {error,[Reason]};
				{ok,Bin}->
				    rpc:call(Node,file,write_file,[DestFileName,Bin],5000)
			    end,
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  R		 
		  end
	  end,
    Reply.
    
%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
rm_file(HostName, Dir,FileName)->
    Reply=case ops_lib:create_agent(HostName) of
	      {error,[node_exists_on_host,HostName]}->
		  {error,[node_exists_on_host,HostName]};
	      {ok,Node} ->
		  FullFileName=filename:join(Dir,FileName),
		  case rpc:call(Node,filelib,is_file,[FullFileName],5000) of
		      {badrpc,Reason}->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[badrpc,Reason]};
		      false ->
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  {error,[eexists,FullFileName]};
		      true ->
			  R=rpc:call(Node,file,delete,[FullFileName],5000),
			  rpc:call(Node,init,stop,[]),
			  true=vm:check_stopped_node(Node),
			  R
		  end
	  end,
    Reply.
    
%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% -------------------------------------------------------------------
